In React, creating multiple components is a common practice to build modular and reusable UIs. These components can be used to break down complex user interfaces into smaller, manageable parts, enhancing code readability and maintainability.

Here's an example of creating and using multiple components in a React application:

Let's consider a simple scenario of a blog post where we have components for the entire blog post, the post title, and the post content.

1. **BlogPost Component (Parent Component):**
   ```jsx
   import React from 'react';
   import PostTitle from './PostTitle';
   import PostContent from './PostContent';

   function BlogPost() {
     return (
       <div className="blog-post">
         <PostTitle title="Sample Blog Post" />
         <PostContent content="This is the content of the blog post." />
       </div>
     );
   }

   export default BlogPost;
   ```
   Here, `BlogPost` is the parent component that renders two child components: `PostTitle` and `PostContent`.

2. **PostTitle Component:**
   ```jsx
   import React from 'react';

   function PostTitle(props) {
     return <h1 className="post-title">{props.title}</h1>;
   }

   export default PostTitle;
   ```
   The `PostTitle` component receives a `title` prop and renders it as an `<h1>` element.

3. **PostContent Component:**
   ```jsx
   import React from 'react';

   function PostContent(props) {
     return <p className="post-content">{props.content}</p>;
   }

   export default PostContent;
   ```
   The `PostContent` component receives a `content` prop and renders it as a `<p>` element.

To use these components:

```jsx
// App.js or any other root file
import React from 'react';
import ReactDOM from 'react-dom';
import BlogPost from './BlogPost';

ReactDOM.render(<BlogPost />, document.getElementById('root'));
```

This code structure demonstrates how components are created and composed in React. The `BlogPost` component acts as the parent, rendering `PostTitle` and `PostContent` components as its children. Each child component encapsulates a specific part of the UI and can be reused in different parts of the application.

By creating modular components and composing them together, React enables developers to efficiently manage and organize the UI, making it easier to maintain and scale the application.